<?php
/**
 * Created by PhpStorm.
 * User: xuliulei
 * Date: 18-4-17
 * Time: 上午10:41
 */

namespace App\Controller\Admin;


use App\Utils\Check;
use App\Utils\CheckException;
use App\Utils\Util;
use Conf\ErrorCode;
use Core\Http\Message\Status;

class User extends Base
{

    function index()
    {
        // TODO: Implement index() method.
        return $this->fetch('Admin/User/login.html');
    }

    function viewRegister(){
        return $this->fetch('Admin/User/register.html');
    }

    function register()
    {
        $params = $this->request()->getRequestParam();
        try {
            $name = Check::check($params['name'] ?? null);
            $password = Check::check($params['password'] ?? null);
        } catch (CheckException $e) {
            Util::printError($this, $e->getCode(), $e->getMessage(), '', $this->api);
            return;
        }

        $hash_password = hash('sha256', $name . $password . 'salt', false);
        $adminUserDb = Util::buildInstance('\App\DB\AdminUserDB');

        if ($adminUserDb->verifyUserIsExists($name)) {
            Util::printError($this, ErrorCode::ERROR_PARAM_WRONG, '用户名已经存在', '', $this->api);
            return;
        }

        $userId = $adminUserDb->register($name, $hash_password);

        $data['userId'] = $userId;

        if ($this->api !== null) {
            Util::printResult($this->response(), ErrorCode::ERROR_SUCCESS, $data);
            return;
        } else {
            $this->assign('data', $data);
        }

    }

    function login()
    {
        $params = $this->request()->getRequestParam();
        $name = $params['name'] ?? null;
        $password = $params['password'] ?? null;
        $hash_password = hash('sha256', $name . $password . 'salt', false);
        $adminUserDb = Util::buildInstance('\App\DB\AdminUserDB');

        if (!$adminUserDb->verifyUserIsExists($name)) {
            Util::printError($this, ErrorCode::ERROR_PARAM_WRONG, '用户不存在', '', $this->api);
            return;
        }

        if (!$adminUserDb->verifyUserLogin($name, $hash_password)) {
            Util::printError($this, ErrorCode::ERROR_PARAM_WRONG, '密码错误', '', $this->api);
            return;
        }

        $userId = $adminUserDb->getUserIdByName($name);

        $str = Util::randomNumString(24) . $userId . $password;
        $token = hash('sha256', $str, false);

        if (!$adminUserDb->addToken($userId, $token)) {
            Util::printError($this, ErrorCode::ERROR_LOGIN, '登录失败', '', $this->api);
            return;
        }

        $id_token = $userId . '|' . $token;
        $data['userId'] = $userId;
        $data['name'] = $name;
        $data['id_token'] = $id_token;

        $this->response()->setCookie('adminUser',json_encode($data),time()+3600*24*30,'/');

        if ($this->api !== null) {
            Util::printResult($this->response(), ErrorCode::ERROR_SUCCESS, $data);
            return;
        } else {
            $this->assign('data', $data);
            $this->fetch('Admin/Index/index.html');
        }
    }

    function loginOut(){
        $cookie = $this->request()->getCookieParams('adminUser');
        if ($cookie){
            $this->response()->setCookie('adminUser','','0','/');
        }
        $this->fetch('Admin/User/login.html');
    }

    function onRequest($actionName)
    {
        parent::onRequest($actionName); // TODO: Change the autogenerated stub
    }

    function actionNotFound($actionName = null, $arguments = null)
    {
        // TODO: Implement actionNotFound() method.
        $this->response()->withStatus(Status::CODE_NOT_FOUND);
    }

    function afterAction()
    {
        // TODO: Implement afterAction() method.
    }
}